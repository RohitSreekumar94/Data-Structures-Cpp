/**********************************************************************************
* File Name	: InsertAVL_Tree.h
* Contents	:
*
* Rev  Name			        Date				        Description
* =================================================================================
* 1.0  Rohit				10/08/2017 					Created
***********************************************************************************/
#ifndef INSERT_AVL_TREE
#define INSERT_AVL_TREE

#include<iostream>
#include<stdlib.h>
#include<math.h>

#ifdef WIN32
#include<Windows.h>

#else
#include<unistd.h>
#endif

using namespace std;

#ifndef WIN32
#define TRUE 1
#define FALSE 0
#endif


/*****************************************************************
* Structure Definition
******************************************************************/
typedef struct TREE
{
	int value;
	int height;
	struct TREE *L_Child;
	struct TREE *R_Child;
	struct TREE *Parent;

}TREE;

/*****************************************************************
* Function Declaration
******************************************************************/

/************************************************************************
* Function Name : InsertBinarySearchTreeElement
************************************************************************/
TREE* InsertElements_AVL_TREE(TREE **rootNode, int elementToBeInserted);

/***********************************************************************************
* Function Name : LocatePredecessor
************************************************************************************/
TREE *LocatePredecessor(TREE *node);

/***********************************************************************************
* Function Name : LocateSuccessor
************************************************************************************/
TREE *LocateSuccessor(TREE *node);

/************************************************************************************
* Function Name : InOrderDisplayTree
************************************************************************************/
void InOrderDisplayTree(TREE *node);

/***************************************************************************
* Function Name : Swap
****************************************************************************/
void Swap(TREE *node1, TREE *node2);

/*****************************************************************************************
* Function Name : GetRootNode
******************************************************************************************/
TREE *GetRootNode(TREE *node);

/*****************************************************************************************
* Function Name : CorrectImbalance
******************************************************************************************/
void CorrectImbalance(TREE **node);

/*****************************************************************************************
* Function Name : ChooseRotation
******************************************************************************************/
void ChooseRotation(TREE **node, char string[]);

/*****************************************************************************************
* Function Name : CopySubTree
******************************************************************************************/
void CopySubTree(TREE **node, TREE **temp);

/*****************************************************************************************
* Function Name : FreeSubTree
******************************************************************************************/
void FreeSubTree(TREE **node);

/***********************************************************************************************
* Function Name : UpdateParent
************************************************************************************************/
void UpdateParent(TREE **node);

/*****************************************************************************************
* Function Name : CheckImbalance
******************************************************************************************/
TREE* CheckImbalance(TREE *node);

/*******************************************************************************************************
* Function Name : CheckNodeImbalance_POT
********************************************************************************************************/
TREE* CheckNodeImbalance(TREE *node);

/*****************************************************************************************
* Function Name : PerformSingleRotation
******************************************************************************************/
TREE *PerformSingleRotation(TREE **node, char string[]);

/*****************************************************************************************
* Function Name : PerformDoubleRotation
******************************************************************************************/
TREE* PerformDoubleRotation(TREE *node, char string[]);
#endif

